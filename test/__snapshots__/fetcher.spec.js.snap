// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Fetcher should console.error other error 1`] = `
Array [
  Array [
    Object {
      "message": "Some Crazy Error",
    },
  ],
]
`;

exports[`Fetcher should dispatch error 1`] = `
Array [
  Object {
    "name": "NAME",
    "paginationKey": undefined,
    "type": "@@fetcher/ADD_RESOURCE",
  },
  Object {
    "name": "NAME",
    "type": "@@fetcher/REQUEST_RESOURCE",
  },
  Object {
    "error": Object {
      "server": "error",
    },
    "name": "NAME",
    "type": "@@fetcher/FETCH_ERROR",
  },
]
`;

exports[`Fetcher should dispatch request on props change 1`] = `
Array [
  Array [
    "/api/zero?",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
  Array [
    "/api/zero?",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
]
`;

exports[`Fetcher should dispatch request on props change 2`] = `
Array [
  Object {
    "name": "NAME",
    "paginationKey": undefined,
    "type": "@@fetcher/ADD_RESOURCE",
  },
  Object {
    "name": "NAME",
    "type": "@@fetcher/REQUEST_RESOURCE",
  },
  Object {
    "name": "NAME",
    "type": "@@fetcher/REQUEST_RESOURCE",
  },
]
`;

exports[`Fetcher should dispatch request on props change 3`] = `
Array [
  Array [
    "/api/zero?",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
  Array [
    "/api/zero?",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
]
`;

exports[`Fetcher should dispatch request on props change 4`] = `
Array [
  Object {
    "name": "NAME",
    "paginationKey": undefined,
    "type": "@@fetcher/ADD_RESOURCE",
  },
  Object {
    "name": "NAME",
    "type": "@@fetcher/REQUEST_RESOURCE",
  },
  Object {
    "name": "NAME",
    "type": "@@fetcher/REQUEST_RESOURCE",
  },
]
`;

exports[`Fetcher should dispatch success 1`] = `
Array [
  Object {
    "name": "NAME",
    "paginationKey": undefined,
    "type": "@@fetcher/ADD_RESOURCE",
  },
  Object {
    "name": "NAME",
    "type": "@@fetcher/REQUEST_RESOURCE",
  },
  Object {
    "acceptResponse": undefined,
    "data": Object {
      "pKey": Array [
        1,
        2,
        3,
        4,
      ],
    },
    "name": "NAME",
    "type": "@@fetcher/FETCH_SUCCESS",
  },
]
`;

exports[`Fetcher should dispatch unmount action on unmount 1`] = `
Array [
  Object {
    "name": "NAME",
    "paginationKey": undefined,
    "type": "@@fetcher/ADD_RESOURCE",
  },
  Object {
    "name": "NAME",
    "type": "@@fetcher/REQUEST_RESOURCE",
  },
  Object {
    "name": "NAME",
    "type": "@@fetcher/REMOVE_RESOURCE",
  },
]
`;

exports[`Fetcher should dispatch unmount action on unmount 2`] = `
Array [
  Array [
    "/api/endpoint?",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
]
`;

exports[`Fetcher should mount, call fetch and dispatch actions 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Fetcher(Unknown))
    passthrough="attribute"
  >
    <Fetcher(Unknown)
      addResource={[Function]}
      endpoint="/api/endpoint"
      fetchAdditionalSuccess={[Function]}
      fetchError={[Function]}
      fetchSuccess={[Function]}
      method="GET"
      modifyResource={[Function]}
      name="NAME"
      passthrough="attribute"
      removeResource={[Function]}
      requestHeader={
        Object {
          "Authorization": "Basic dummy_token",
          "Content-Type": "application/json",
        }
      }
      requestResource={[Function]}
      resource={
        Object {
          "data": Object {},
          "error": false,
          "loading": false,
        }
      }
    >
      <Component
        data={Object {}}
        error={false}
        fetcher={
          Object {
            "endpoint": "/api/endpoint",
            "method": "GET",
            "name": "NAME",
          }
        }
        loading={false}
        modifyResource={[Function]}
        passthrough="attribute"
      >
        <div />
      </Component>
    </Fetcher(Unknown)>
  </Connect(Fetcher(Unknown))>
</Provider>
`;

exports[`Fetcher should mount, call fetch and dispatch actions 2`] = `
Array [
  Object {
    "name": "NAME",
    "paginationKey": undefined,
    "type": "@@fetcher/ADD_RESOURCE",
  },
  Object {
    "name": "NAME",
    "type": "@@fetcher/REQUEST_RESOURCE",
  },
]
`;

exports[`Fetcher should mount, call fetch and dispatch actions 3`] = `
Array [
  Array [
    "/api/endpoint?",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
]
`;

exports[`Fetcher should render empty div if store gets messed with 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Fetcher(Unknown))
    passthrough="attribute"
  >
    <Fetcher(Unknown)
      addResource={[Function]}
      endpoint="/api/endpoint"
      fetchAdditionalSuccess={[Function]}
      fetchError={[Function]}
      fetchSuccess={[Function]}
      method="GET"
      modifyResource={[Function]}
      name="NAME"
      passthrough="attribute"
      removeResource={[Function]}
      requestHeader={
        Object {
          "Authorization": "Basic dummy_token",
          "Content-Type": "application/json",
        }
      }
      requestResource={[Function]}
    >
      <div />
    </Fetcher(Unknown)>
  </Connect(Fetcher(Unknown))>
</Provider>
`;

exports[`Fetcher should use loadInitialRows with different orderBys 1`] = `
Array [
  Array [
    "/api/zero?limit=500&offset=0",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
  Array [
    "/api/zero?limit=500&offset=0&sort=columnKey",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
]
`;

exports[`Fetcher should use loadMoreRows 1`] = `
Array [
  Array [
    "/api/zero?limit=500&offset=0",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
  Array [
    "/api/zero?limit=150&offset=100",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
]
`;

exports[`Fetcher should use loadMoreRows 2`] = `
Array [
  Object {
    "name": "NAME",
    "paginationKey": "pKey",
    "type": "@@fetcher/ADD_RESOURCE",
  },
  Object {
    "name": "NAME",
    "type": "@@fetcher/REQUEST_RESOURCE",
  },
  Object {
    "acceptResponse": undefined,
    "data": Object {
      "pKey": Array [
        1,
        2,
        3,
        4,
      ],
    },
    "name": "NAME",
    "type": "@@fetcher/FETCH_SUCCESS",
  },
  Object {
    "acceptResponse": undefined,
    "data": Object {
      "pKey": Array [
        1,
        2,
        3,
        4,
      ],
    },
    "name": "NAME",
    "type": "@@fetcher/FETCH_ADDITIONAL_SUCCESS",
  },
]
`;

exports[`Fetcher should use pagination 1`] = `
Array [
  Array [
    "/api/zero?limit=500&offset=0",
    Object {
      "body": undefined,
      "credentials": "include",
      "headers": Object {
        "Authorization": "Basic dummy_token",
        "Content-Type": "application/json",
      },
      "method": "GET",
    },
  ],
]
`;
